buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
		classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'

		
	
    }
}

apply plugin: 'forge'
apply plugin: 'java'
apply plugin: 'org.junit.platform.gradle.plugin'

//gradlew findbugsMain | findbugsTest | findbugsSourceSet
apply plugin: 'findbugs'

//gradlew checkstyleMain | checkstyleTest | checkstyleSourceSet
apply plugin: 'checkstyle'

//graldew pmdMain | pmdTest | pmdSourceSet
apply plugin: 'pmd'


//gradlew check | build | test

version = "1.1"
group= "com.programgames.multimodplus" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "multimodplus"
sourceCompatibility = 1.7
targetCompatibility = 1.7

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
}
checkstyle {
    configFile = file("${project.rootDir}/config/checkstyle.xml")
    toolVersion = '6.7'
}
pmd {
  toolVersion = '4.3'
  ignoreFailures = true
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = [
    "basic",
    "braces"
  ]
}


dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
	 testCompile(
            'org.junit.jupiter:junit-jupiter-api:5.1.0'
    )
    testRuntime(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    )

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

test {
    //useJUnitPlatform()
}

idea { module { inheritOutputDirs = true } }

